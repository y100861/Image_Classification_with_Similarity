# -*- coding: utf-8 -*-

import random
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from torchsummary import summary as summary
from torch.utils.data import Dataset
from torch.utils.data import DataLoader


# Dataset
class celebADataset(torch.utils.data.Dataset):
    def __init__(self, base_dir, split_path, transform=None, mode="train"):
        self.data = []
        self.labels = {}
        self.n_label = 0
        mode_dict = {"train": "0", "val": "1", "test": "2"}
        image_names = []

        # Image directory
        image_dirs = [dir for dir in os.listdir(base_dir) if os.path.isdir(os.path.join(base_dir, dir))]
        image_dirs.sort()

        # Load split data
        with open(split_path, "r") as f:
            splits = f.readlines()

        # Create Data
        for name in image_dirs:
            if name not in self.labels:
                self.labels[name] = self.n_label
                self.n_label += 1

            image_name = [os.path.join(name, n) for n in os.listdir(os.path.join(base_dir, name)) if n.endswith((".jpg", ".png"))]
            image_name.sort()
            image_names.extend(image_name)
            
        for file_name, mode_line in zip(image_names, splits):
            if mode_line.rstrip().split()[1] == mode_dict[mode]:
                self.data.append([os.path.join(base_dir, file_name), self.labels[file_name.split("/")[0]]])
        
        # Augmentation
        self.transforms = transform

    def __getitem__(self, idx):
        label = self.data[idx][1]
        
        file_path = self.data[idx][0]
        image = Image.open(file_path)
        if self.transforms is None:
            tf = transforms.ToTensor()
            image = tf(image)
            return image, label
        
        # Augmentation
        image = self.transforms(image)
        return image, label
    
    def __len__(self):
        return len(self.data)

